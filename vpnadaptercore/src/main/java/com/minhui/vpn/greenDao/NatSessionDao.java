package com.minhui.vpn.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.minhui.vpn.nat.NatSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NAT_SESSION".
*/
public class NatSessionDao extends AbstractDao<NatSession, Long> {

    public static final String TABLENAME = "NAT_SESSION";

    /**
     * Properties of entity NatSession.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NetType = new Property(1, String.class, "netType", false, "NET_TYPE");
        public final static Property IpAndPort = new Property(2, String.class, "ipAndPort", false, "IP_AND_PORT");
        public final static Property SessionTag = new Property(3, String.class, "sessionTag", false, "SESSION_TAG");
        public final static Property RemoteIP = new Property(4, int.class, "remoteIP", false, "REMOTE_IP");
        public final static Property RemotePort = new Property(5, short.class, "remotePort", false, "REMOTE_PORT");
        public final static Property RemoteHost = new Property(6, String.class, "remoteHost", false, "REMOTE_HOST");
        public final static Property LocalPort = new Property(7, short.class, "localPort", false, "LOCAL_PORT");
        public final static Property TcpOrUpdBytesSent = new Property(8, int.class, "tcpOrUpdBytesSent", false, "TCP_OR_UPD_BYTES_SENT");
        public final static Property TcpOrUdpPacketSent = new Property(9, int.class, "tcpOrUdpPacketSent", false, "TCP_OR_UDP_PACKET_SENT");
        public final static Property TcpOrUdpReceiveByteNum = new Property(10, int.class, "tcpOrUdpReceiveByteNum", false, "TCP_OR_UDP_RECEIVE_BYTE_NUM");
        public final static Property TcpOrUdpReceivePacketNum = new Property(11, int.class, "tcpOrUdpReceivePacketNum", false, "TCP_OR_UDP_RECEIVE_PACKET_NUM");
        public final static Property RawBytesSent = new Property(12, int.class, "rawBytesSent", false, "RAW_BYTES_SENT");
        public final static Property RawPacketSent = new Property(13, int.class, "rawPacketSent", false, "RAW_PACKET_SENT");
        public final static Property RawReceiveByteNum = new Property(14, int.class, "rawReceiveByteNum", false, "RAW_RECEIVE_BYTE_NUM");
        public final static Property RawReceivePacketNum = new Property(15, int.class, "rawReceivePacketNum", false, "RAW_RECEIVE_PACKET_NUM");
        public final static Property LastRefreshTime = new Property(16, long.class, "lastRefreshTime", false, "LAST_REFRESH_TIME");
        public final static Property IsHttpsSession = new Property(17, boolean.class, "isHttpsSession", false, "IS_HTTPS_SESSION");
        public final static Property RequestUrl = new Property(18, String.class, "requestUrl", false, "REQUEST_URL");
        public final static Property PathUrl = new Property(19, String.class, "pathUrl", false, "PATH_URL");
        public final static Property Method = new Property(20, String.class, "method", false, "METHOD");
        public final static Property PgName = new Property(21, String.class, "pgName", false, "PG_NAME");
        public final static Property AppName = new Property(22, String.class, "appName", false, "APP_NAME");
        public final static Property ConnectionStartTime = new Property(23, long.class, "connectionStartTime", false, "CONNECTION_START_TIME");
        public final static Property VpnStartTime = new Property(24, long.class, "vpnStartTime", false, "VPN_START_TIME");
        public final static Property IsHttp = new Property(25, boolean.class, "isHttp", false, "IS_HTTP");
        public final static Property DefaultAPP = new Property(26, String.class, "defaultAPP", false, "DEFAULT_APP");
        public final static Property SourceIP = new Property(27, int.class, "sourceIP", false, "SOURCE_IP");
        public final static Property IsHttpsRoute = new Property(28, boolean.class, "isHttpsRoute", false, "IS_HTTPS_ROUTE");
        public final static Property DefaultAPPName = new Property(29, String.class, "defaultAPPName", false, "DEFAULT_APPNAME");
        public final static Property MUid = new Property(30, int.class, "mUid", false, "M_UID");
    }


    public NatSessionDao(DaoConfig config) {
        super(config);
    }
    
    public NatSessionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NAT_SESSION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NET_TYPE\" TEXT," + // 1: netType
                "\"IP_AND_PORT\" TEXT," + // 2: ipAndPort
                "\"SESSION_TAG\" TEXT," + // 3: sessionTag
                "\"REMOTE_IP\" INTEGER NOT NULL ," + // 4: remoteIP
                "\"REMOTE_PORT\" INTEGER NOT NULL ," + // 5: remotePort
                "\"REMOTE_HOST\" TEXT," + // 6: remoteHost
                "\"LOCAL_PORT\" INTEGER NOT NULL ," + // 7: localPort
                "\"TCP_OR_UPD_BYTES_SENT\" INTEGER NOT NULL ," + // 8: tcpOrUpdBytesSent
                "\"TCP_OR_UDP_PACKET_SENT\" INTEGER NOT NULL ," + // 9: tcpOrUdpPacketSent
                "\"TCP_OR_UDP_RECEIVE_BYTE_NUM\" INTEGER NOT NULL ," + // 10: tcpOrUdpReceiveByteNum
                "\"TCP_OR_UDP_RECEIVE_PACKET_NUM\" INTEGER NOT NULL ," + // 11: tcpOrUdpReceivePacketNum
                "\"RAW_BYTES_SENT\" INTEGER NOT NULL ," + // 12: rawBytesSent
                "\"RAW_PACKET_SENT\" INTEGER NOT NULL ," + // 13: rawPacketSent
                "\"RAW_RECEIVE_BYTE_NUM\" INTEGER NOT NULL ," + // 14: rawReceiveByteNum
                "\"RAW_RECEIVE_PACKET_NUM\" INTEGER NOT NULL ," + // 15: rawReceivePacketNum
                "\"LAST_REFRESH_TIME\" INTEGER NOT NULL ," + // 16: lastRefreshTime
                "\"IS_HTTPS_SESSION\" INTEGER NOT NULL ," + // 17: isHttpsSession
                "\"REQUEST_URL\" TEXT," + // 18: requestUrl
                "\"PATH_URL\" TEXT," + // 19: pathUrl
                "\"METHOD\" TEXT," + // 20: method
                "\"PG_NAME\" TEXT," + // 21: pgName
                "\"APP_NAME\" TEXT," + // 22: appName
                "\"CONNECTION_START_TIME\" INTEGER NOT NULL ," + // 23: connectionStartTime
                "\"VPN_START_TIME\" INTEGER NOT NULL ," + // 24: vpnStartTime
                "\"IS_HTTP\" INTEGER NOT NULL ," + // 25: isHttp
                "\"DEFAULT_APP\" TEXT," + // 26: defaultAPP
                "\"SOURCE_IP\" INTEGER NOT NULL ," + // 27: sourceIP
                "\"IS_HTTPS_ROUTE\" INTEGER NOT NULL ," + // 28: isHttpsRoute
                "\"DEFAULT_APPNAME\" TEXT," + // 29: defaultAPPName
                "\"M_UID\" INTEGER NOT NULL );"); // 30: mUid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NAT_SESSION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NatSession entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String netType = entity.getNetType();
        if (netType != null) {
            stmt.bindString(2, netType);
        }
 
        String ipAndPort = entity.getIpAndPort();
        if (ipAndPort != null) {
            stmt.bindString(3, ipAndPort);
        }
 
        String sessionTag = entity.getSessionTag();
        if (sessionTag != null) {
            stmt.bindString(4, sessionTag);
        }
        stmt.bindLong(5, entity.getRemoteIP());
        stmt.bindLong(6, entity.getRemotePort());
 
        String remoteHost = entity.getRemoteHost();
        if (remoteHost != null) {
            stmt.bindString(7, remoteHost);
        }
        stmt.bindLong(8, entity.getLocalPort());
        stmt.bindLong(9, entity.getTcpOrUpdBytesSent());
        stmt.bindLong(10, entity.getTcpOrUdpPacketSent());
        stmt.bindLong(11, entity.getTcpOrUdpReceiveByteNum());
        stmt.bindLong(12, entity.getTcpOrUdpReceivePacketNum());
        stmt.bindLong(13, entity.getRawBytesSent());
        stmt.bindLong(14, entity.getRawPacketSent());
        stmt.bindLong(15, entity.getRawReceiveByteNum());
        stmt.bindLong(16, entity.getRawReceivePacketNum());
        stmt.bindLong(17, entity.getLastRefreshTime());
        stmt.bindLong(18, entity.getIsHttpsSession() ? 1L: 0L);
 
        String requestUrl = entity.getRequestUrl();
        if (requestUrl != null) {
            stmt.bindString(19, requestUrl);
        }
 
        String pathUrl = entity.getPathUrl();
        if (pathUrl != null) {
            stmt.bindString(20, pathUrl);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(21, method);
        }
 
        String pgName = entity.getPgName();
        if (pgName != null) {
            stmt.bindString(22, pgName);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(23, appName);
        }
        stmt.bindLong(24, entity.getConnectionStartTime());
        stmt.bindLong(25, entity.getVpnStartTime());
        stmt.bindLong(26, entity.getIsHttp() ? 1L: 0L);
 
        String defaultAPP = entity.getDefaultAPP();
        if (defaultAPP != null) {
            stmt.bindString(27, defaultAPP);
        }
        stmt.bindLong(28, entity.getSourceIP());
        stmt.bindLong(29, entity.getIsHttpsRoute() ? 1L: 0L);
 
        String defaultAPPName = entity.getDefaultAPPName();
        if (defaultAPPName != null) {
            stmt.bindString(30, defaultAPPName);
        }
        stmt.bindLong(31, entity.getMUid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NatSession entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String netType = entity.getNetType();
        if (netType != null) {
            stmt.bindString(2, netType);
        }
 
        String ipAndPort = entity.getIpAndPort();
        if (ipAndPort != null) {
            stmt.bindString(3, ipAndPort);
        }
 
        String sessionTag = entity.getSessionTag();
        if (sessionTag != null) {
            stmt.bindString(4, sessionTag);
        }
        stmt.bindLong(5, entity.getRemoteIP());
        stmt.bindLong(6, entity.getRemotePort());
 
        String remoteHost = entity.getRemoteHost();
        if (remoteHost != null) {
            stmt.bindString(7, remoteHost);
        }
        stmt.bindLong(8, entity.getLocalPort());
        stmt.bindLong(9, entity.getTcpOrUpdBytesSent());
        stmt.bindLong(10, entity.getTcpOrUdpPacketSent());
        stmt.bindLong(11, entity.getTcpOrUdpReceiveByteNum());
        stmt.bindLong(12, entity.getTcpOrUdpReceivePacketNum());
        stmt.bindLong(13, entity.getRawBytesSent());
        stmt.bindLong(14, entity.getRawPacketSent());
        stmt.bindLong(15, entity.getRawReceiveByteNum());
        stmt.bindLong(16, entity.getRawReceivePacketNum());
        stmt.bindLong(17, entity.getLastRefreshTime());
        stmt.bindLong(18, entity.getIsHttpsSession() ? 1L: 0L);
 
        String requestUrl = entity.getRequestUrl();
        if (requestUrl != null) {
            stmt.bindString(19, requestUrl);
        }
 
        String pathUrl = entity.getPathUrl();
        if (pathUrl != null) {
            stmt.bindString(20, pathUrl);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(21, method);
        }
 
        String pgName = entity.getPgName();
        if (pgName != null) {
            stmt.bindString(22, pgName);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(23, appName);
        }
        stmt.bindLong(24, entity.getConnectionStartTime());
        stmt.bindLong(25, entity.getVpnStartTime());
        stmt.bindLong(26, entity.getIsHttp() ? 1L: 0L);
 
        String defaultAPP = entity.getDefaultAPP();
        if (defaultAPP != null) {
            stmt.bindString(27, defaultAPP);
        }
        stmt.bindLong(28, entity.getSourceIP());
        stmt.bindLong(29, entity.getIsHttpsRoute() ? 1L: 0L);
 
        String defaultAPPName = entity.getDefaultAPPName();
        if (defaultAPPName != null) {
            stmt.bindString(30, defaultAPPName);
        }
        stmt.bindLong(31, entity.getMUid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NatSession readEntity(Cursor cursor, int offset) {
        NatSession entity = new NatSession( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // netType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ipAndPort
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sessionTag
            cursor.getInt(offset + 4), // remoteIP
            cursor.getShort(offset + 5), // remotePort
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remoteHost
            cursor.getShort(offset + 7), // localPort
            cursor.getInt(offset + 8), // tcpOrUpdBytesSent
            cursor.getInt(offset + 9), // tcpOrUdpPacketSent
            cursor.getInt(offset + 10), // tcpOrUdpReceiveByteNum
            cursor.getInt(offset + 11), // tcpOrUdpReceivePacketNum
            cursor.getInt(offset + 12), // rawBytesSent
            cursor.getInt(offset + 13), // rawPacketSent
            cursor.getInt(offset + 14), // rawReceiveByteNum
            cursor.getInt(offset + 15), // rawReceivePacketNum
            cursor.getLong(offset + 16), // lastRefreshTime
            cursor.getShort(offset + 17) != 0, // isHttpsSession
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // requestUrl
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // pathUrl
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // method
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // pgName
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // appName
            cursor.getLong(offset + 23), // connectionStartTime
            cursor.getLong(offset + 24), // vpnStartTime
            cursor.getShort(offset + 25) != 0, // isHttp
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // defaultAPP
            cursor.getInt(offset + 27), // sourceIP
            cursor.getShort(offset + 28) != 0, // isHttpsRoute
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // defaultAPPName
            cursor.getInt(offset + 30) // mUid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NatSession entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNetType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIpAndPort(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSessionTag(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemoteIP(cursor.getInt(offset + 4));
        entity.setRemotePort(cursor.getShort(offset + 5));
        entity.setRemoteHost(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLocalPort(cursor.getShort(offset + 7));
        entity.setTcpOrUpdBytesSent(cursor.getInt(offset + 8));
        entity.setTcpOrUdpPacketSent(cursor.getInt(offset + 9));
        entity.setTcpOrUdpReceiveByteNum(cursor.getInt(offset + 10));
        entity.setTcpOrUdpReceivePacketNum(cursor.getInt(offset + 11));
        entity.setRawBytesSent(cursor.getInt(offset + 12));
        entity.setRawPacketSent(cursor.getInt(offset + 13));
        entity.setRawReceiveByteNum(cursor.getInt(offset + 14));
        entity.setRawReceivePacketNum(cursor.getInt(offset + 15));
        entity.setLastRefreshTime(cursor.getLong(offset + 16));
        entity.setIsHttpsSession(cursor.getShort(offset + 17) != 0);
        entity.setRequestUrl(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPathUrl(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMethod(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPgName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAppName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setConnectionStartTime(cursor.getLong(offset + 23));
        entity.setVpnStartTime(cursor.getLong(offset + 24));
        entity.setIsHttp(cursor.getShort(offset + 25) != 0);
        entity.setDefaultAPP(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setSourceIP(cursor.getInt(offset + 27));
        entity.setIsHttpsRoute(cursor.getShort(offset + 28) != 0);
        entity.setDefaultAPPName(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setMUid(cursor.getInt(offset + 30));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NatSession entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NatSession entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NatSession entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
